" Airline config (Must be set before loading plugin)
if !exists('g:airline_symbols')
    let g:airline_symbols = {}
endif
let g:airline_powerline_fonts = 1
let g:airline_left_sep = 'ÓÇ∞'
"let g:airline_left_sep = ''
let g:airline_left_alt_sep = 'ÓÇ±'
let g:airline_right_sep = 'ÓÇ≤'
"let g:airline_right_sep = ''
let g:airline_right_alt_sep = 'ÓÇ≥'
let g:airline_symbols.branch = 'ÓÇ†'
"let g:airline_symbols.branch = '‚éá'
let g:airline_symbols.readonly = 'ÓÇ¢'
let g:airline_symbols.linenr = 'ÓÇ°'
let g:airline_symbols.linenr = '‚êä'
let g:airline_symbols.linenr = '‚ê§'
let g:airline_symbols.linenr = '¬∂'
let g:airline_symbols.crypt = 'üîí'
let g:airline_symbols.maxlinenr = '‚ò∞'
let g:airline_symbols.maxlinenr = ''
let g:airline_symbols.paste = 'œÅ'
let g:airline_symbols.paste = '√û'
let g:airline_symbols.paste = '‚à•'
let g:airline_symbols.spell = 'Íû®'
let g:airline_symbols.notexists = '‚àÑ'
let g:airline_symbols.whitespace = 'Œû'
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#bufferline#enabled = 1
let g:airline#extensions#tabline#show_buffers = 1
let g:airline#extensions#tabline#show_tabs = 1
let g:airline#extensions#tabline#buffer_min_count = 0
let g:airline#extensions#tabline#formatter = 'unique_tail'

" Font configuration
if has("win32")
    set guifont=Powerline_Consolas:h8:cANSI
else
    "set guifont=Monospace\ 9
    "set guifont=Consolas\ 8
    "set guifont=Ubuntu\ Mono\ derivative\ Powerline\ 12
    set guifont=Liberation\ Mono\ for\ Powerline\ 11
endif

" Popup menu configuration
highlight Pmenu ctermbg=237 ctermfg=248
highlight PmenuSel ctermbg=243 ctermfg=226

"Latex
let g:tex_flavor='latex'

" Toggle quickfix
let g:lt_location_list_toggle_map = '<F4>'
let g:lt_quickfix_list_toggle_map = '<F5>'
let g:lt_height = 15

" Key bindings
" ===========================================================================

nmap <F2>          :CtrlPMRUFiles<CR>
nmap <F3>          :NERDTreeToggle<CR>
nmap <F8>          :Compile<CR>
nmap <leader><F2>  :CtrlPMixed<CR>
nmap <leader><F3>  :TagbarToggle<CR>
nmap <leader>b     :CtrlPBuffer<CR>
nmap <leader>x     :BD<cr>
nmap <leader>¬ß     :set rnu! rnu? <cr>

" Expand / decrease selection
vmap v <Plug>(expand_region_expand)
vmap <C-v> <Plug>(expand_region_shrink)

" Start interactive EasyAlign in visual mode (e.g. vip<Enter>)
vmap <Enter> <Plug>(EasyAlign)

" Start interactive EasyAlign for a motion/text object (e.g. gaip)
nmap ga <Plug>(EasyAlign)

" Remap to use tag plugin if installed 
if executable("gtags")
    nmap <leader>gt :GtagsCursor<CR>]
elseif executable("cscope")
    let g:cscope_silent = 1
    " Minimum key mappings
    nnoremap <leader>fa :call CscopeFindInteractive(expand('<cword>'))<CR>
    nnoremap <leader>l :call ToggleLocationList()<CR>
    " s: Find this C symbol
    nnoremap  <leader>fs :call CscopeFind('s', expand('<cword>'))<CR>
    " g: Find this definition
    nnoremap  <leader>fg :call CscopeFind('g', expand('<cword>'))<CR>
    " d: Find functions called by this function
    nnoremap  <leader>fd :call CscopeFind('d', expand('<cword>'))<CR>
    " c: Find functions calling this function
    nnoremap  <leader>fc :call CscopeFind('c', expand('<cword>'))<CR>
    " t: Find this text string
    nnoremap  <leader>ft :call CscopeFind('t', expand('<cword>'))<CR>
    " e: Find this egrep pattern
    nnoremap  <leader>fe :call CscopeFind('e', expand('<cword>'))<CR>
    " f: Find this file
    nnoremap  <leader>ff :call CscopeFind('f', expand('<cword>'))<CR>
    " i: Find files #including this file
    nnoremap  <leader>fi :call CscopeFind('i', expand('<cword>'))<CR>
endif


" Autocommands
" ===========================================================================

" Treat Qt stylesheets as CSS files
au BufNewFile,BufRead *.qss set filetype=css
"
" Use bitbake highlighting for OE-lite recipes
au BufNewFile,BufRead *.oe set filetype=bitbake

" Autochdir confuses plugins. This is a workaround
au BufEnter * silent! lcd %:p:h

" Markdown syntax
au BufNewFile,BufReadPost *.md set filetype=markdown

" Disable parenthesis highlighting for some file formats
au FileType python let g:loaded_matchparen=1

" Always wrap in vimdiff
au VimEnter * if &diff | execute 'windo set wrap' | endif


" Plugin configurations
" ===========================================================================

" VCSCommands standard mappings conflicts with NERD-commenter
let VCSCommandDisableMappings = 1

" PyMode Config
let g:pymode_options_colorcolumn = 0
let g:pymode_folding = 0
let g:pymode_lint = 1
let g:pymode_lint_on_write = 1
let g:pymode_lint_message = 1
let g:pymode_lint_checker = "pyflakes,pep8"
let g:pymode_lint_ignore = "E501,E303,W0611,W391,E265,E401,W602,C901,W293"
let g:pymode_lint_slow_sync = 0
let g:pymode_trim_whitespaces = 0
let g:pymode_rope = 0

" Syntastic config
let g:syntastic_cpp_compiler_options = "-std=c++11 -Wall -Wextra -Wpedantic"
let g:syntastic_mode_map = {"mode": "passive"}
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1

" Tab completion
if has('nvim')
    let g:deoplete#sources#clang#libclang_path = "/usr/lib/x86_64-linux-gnu/libclang.so"
    let g:deoplete#sources#clang#clang_header = "/usr/lib/clang"
    let g:deoplete#enable_at_startup = 1
    inoremap <silent><expr> <Tab>
    \ pumvisible() ? "\<C-n>" :
    \ deoplete#mappings#manual_complete()
else
    inoremap <expr> <Tab> pumvisible() ? "\<C-n>" : "\<Tab>"
    inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
    inoremap <expr> <cr> pumvisible() ? "\<C-y>\<cr>" : "\<cr>"
endif

" Neomake check on write
au BufWritePost *.c,*.h,*.cpp,*.hpp Neomake

" Speed up easytags
"let g:easytags_syntax_keyword = 'always'
"let g:gutentags_modules = ['ctags', 'cscope']

" Speed up TagBar
set updatetime=1000

" Latexbox config
au FileType tex nnoremap <buffer> <leader><F3> :LatexTOCToggle<CR>
let g:LatexBox_split_side = 'rightbelow'
let g:LatexBox_latexmk_options = '-pdflatex="pdflatex -synctex=1 %O %S"'
let g:LatexBox_latexmk_async=1

" Faster CtrlP
let g:ctrlp_user_command = 'ag %s -i --nocolor --nogroup --hidden
      \ --ignore .git
      \ --ignore .svn
      \ --ignore .hg
      \ --ignore .DS_Store
      \ --ignore "**/*.pyc"
      \ -g ""'

" Latex-suite requires grep to always return filename
set grepprg=grep\ -nH\ $*

" Set normal make (If changed by lvimrc)
"set makeprg=make!

" Taglist
let Tlist_Use_Right_Window = 1

" Autopairs
let g:AutoPairsMapCR = 0

" Better color for matching parenthesis
au BufRead * hi MatchParen ctermbg=none ctermfg=yellow

" NERDTree
let g:NERDTreeShowHidden = 1
let g:NERDTreeAutoCenter = 1
let g:NERDTreeHijackNetrw = 0
" Auto refresh NERDTree
function! IsNTOpen()
  return exists("t:NERDTreeBufName") && (bufwinnr(t:NERDTreeBufName) != -1)
endfunction
func! NERDTreeRefresh()
    if &modifiable && IsNTOpen() && strlen(expand('%')) > 0 && !&diff
        NERDTreeFind
        wincmd p
    endif
endfunc
au BufEnter *.* call NERDTreeRefresh()

" NERDCommenter
let g:NERDSpaceDelims = 1

" Signify
let g:signify_vcs_list = [ 'svn' ]

" Custom Async compilation
func MakeThis()
    copen 15
    exe 'cd ' . g:make_this_path
    if has('nvim') && g:make_this_async == 1
       exec "AsyncRun " . g:make_this_cmd
    else
       let &makeprg=g:make_this_cmd
       make
    endif
endfunc
command! Compile call MakeThis()

" Load plugins
exec load_vimplug_config

colorscheme neverland

